using System.Collections.Generic;
using System.Linq;
using UnityEditor;
using UnityEngine;
using System.IO;

namespace UPBS
{
    [ExecuteAlways]
    public class GeneratePlaybackScene : MonoBehaviour
    {
        [HideInInspector]

        public List<SerializableSystemType> replicationTypes = new List<SerializableSystemType>
        {
        new SerializableSystemType(typeof(UPBS.Execution.PBTrackerID)),
        new SerializableSystemType(typeof(Camera)),
        new SerializableSystemType(typeof(MeshRenderer)),
        new SerializableSystemType(typeof(MeshFilter)),
        new SerializableSystemType(typeof(Collider)),
        new SerializableSystemType(typeof(Light))
        };

        [HideInInspector]
        public List<bool> useDerivedClasses = new List<bool>
        {
            true, true, true, true, true, true
        };
        public GameObject[] autoGeneratedPrefabs;

        public enum PlaybackRepicationPrecisionSettings
        {
            Exact, Partial, OnlyNecessary
        }
        public bool replicateCurrentSceneOnly = true;
        [Tooltip("Automatically save the generated scene and add it to the project settings. If you're saving a scene manually, make sure it follows this format in order to be recognized at runtime: [ReplicatedSceneName]-PLAYBACK-")]
        public bool autoSaveGeneratedScene = true;
        public PlaybackRepicationPrecisionSettings replicationPrecision;
        public string sceneSuffix;

        /// <summary>
        /// Replicate all root gameobjects along with their heirarchy under a parent gameobject
        /// </summary>
        /// <param name="roots"></param>
        private List<GameObject> ReplicateFullHierarchy(List<GameObject> roots)
        {
            List<GameObject> replicatedRoots = new List<GameObject>();
            foreach (GameObject go in roots)
            {
                GameObject replicatedRoot = Instantiate(go);
                replicatedRoot.name = go.name;
                replicatedRoots.Add(replicatedRoot);
            }

            return replicatedRoots;
        }

        /// <summary>
        /// Alter each root gameobject and it's children in accordance to the current replication settings
        /// </summary>
        /// <param name="roots"></param>
        /// <param name="replicationParent"></param>
        private void EnforceReplicationPattern(List<GameObject> roots, Transform replicationParent)
        {
            for(int root = 0; root < roots.Count; ++root)
            {
                EnforceReplicationPattern_Internal(roots[root].gameObject);
                roots[root].transform.parent = replicationParent;

                for (int child = 0; child < roots[root].transform.childCount; ++child)
                {
                    EnforceReplicationPattern_Internal(roots[root].transform.GetChild(child).gameObject);
                }
            }
        }

        private bool TrySaveScenes(UnityEngine.SceneManagement.Scene[] scenes)
        {
            bool allClear = true;

            foreach (var scene in scenes)
            {
                if (!scene.isDirty && !string.IsNullOrEmpty(scene.name))
                {
                    continue;
                }

                else
                {
                    if (!UnityEditor.SceneManagement.EditorSceneManager.SaveScene(scene))
                    {
                        allClear = false;
                        Debug.Log($"Failed to save scene: {scene.name}");
                        break;
                    }

                    else
                    {
                        Debug.Log($"Saved Scene: {scene.name}");
                    }
                }
            }

            return allClear;
        }

        private bool GameOjbectHasReplicableChildren(GameObject root)
        {
            bool hasCosmeticChildren = false;
            foreach(var child in root.GetComponentsInChildren<Component>())
            {
                SerializableSystemType componentType = new SerializableSystemType(child.GetType());
                if (CheckComponentForReplicationPattern(child))
                {
                    hasCosmeticChildren = true;
                    break;
                }
            }

            return hasCosmeticChildren;
        }

        /// <summary>
        /// Determine if the provided component can be replicated according to current settings
        /// </summary>
        /// <param name="comp"></param>
        /// <returns>True if component can be replicated</returns>
        private bool CheckComponentForReplicationPattern(Component comp)
        {
            SerializableSystemType componentType = new SerializableSystemType(comp.GetType());
            if (replicationTypes.Contains(componentType))
            {
                return true;
            }

            else
            {
                if(useDerivedClasses.Count != replicationTypes.Count)
                {
                    Debug.LogWarning("Replication Types and Derived Classes are of different sizes!!!");
                }

                for(int i = 0; i < replicationTypes.Count; ++i)
                {
                    if(useDerivedClasses[i] && comp.GetType().IsSubclassOf(replicationTypes[i].SystemType))
                    {
                        return true;
                    }
                }
            }

            return false;
        }

        private void EnforceReplicationPattern_Internal(GameObject go)
        {
            Component[] comps = go.GetComponents<Component>();
            bool validRepComponentFound = false;

            foreach (var comp in comps)
            {
                if (
                    replicationPrecision == PlaybackRepicationPrecisionSettings.Exact || //THIS SEEMS ODD. INVESTIGATE LATER
                    CheckComponentForReplicationPattern(comp)
                    )
                {
                    validRepComponentFound = true;
                    break;
                }
            }

            if (validRepComponentFound)
            {
                List<System.Type> reflectionsToAdd = new List<System.Type>();
                for (int i = comps.Length - 1; i > 0; --i) //Automatically exclude the Transform component
                {
                    
                    //If we have a UPBS Tracker, get ready to add a Reflection
                    Data.UPBSTracker trackerComponent = comps[i] as UPBS.Data.UPBSTracker;
                    if (trackerComponent)
                    {
                        if (trackerComponent.ReflectionType.IsSubclassOf(typeof(UPBS.Execution.PBReflection)))
                        {
                            reflectionsToAdd.Add(trackerComponent.ReflectionType);
                        }

                        else
                        {
                            Debug.LogWarning($"ReflectionType field of {trackerComponent.GetType().Name} must inherit from the class PBReflection");
                        }
                        
                    }
                    
                    if (!CheckComponentForReplicationPattern(comps[i]))
                    {
                        DestroyImmediate(comps[i]);
                    }
                }

                foreach(var reflectionType in reflectionsToAdd)
                {
                    go.AddComponent(reflectionType);
                }
            }
        }

        [ContextMenu("Generate Scene")]
        void Generate()
        {
            var currentScene = UnityEditor.SceneManagement.EditorSceneManager.GetActiveScene();
            if (EditorUtility.DisplayDialog
                ("Save Open Scenes?",
                "Playback Generation requires that all open scenes be saved. Are you sure you want to save?",
                "Save",
                "Do Not Save")
                )
            {
                UnityEngine.SceneManagement.Scene[] scenesToReplicate;
                UnityEngine.SceneManagement.Scene[] allOpenScenes;

                allOpenScenes = new UnityEngine.SceneManagement.Scene[UnityEditor.SceneManagement.EditorSceneManager.sceneCount];
                for (int i = 0; i < UnityEditor.SceneManagement.EditorSceneManager.sceneCount; ++i)
                {
                    allOpenScenes[i] = UnityEditor.SceneManagement.EditorSceneManager.GetSceneAt(i);
                }

                if (replicateCurrentSceneOnly)
                {
                    scenesToReplicate = new UnityEngine.SceneManagement.Scene[] { UnityEditor.SceneManagement.EditorSceneManager.GetActiveScene() };
                }

                else
                {
                    scenesToReplicate = allOpenScenes;
                }

                if (TrySaveScenes(allOpenScenes))
                {
                    List<GameObject> roots = new List<GameObject>();
                    foreach (var scene in scenesToReplicate)
                    {
                        roots.AddRange(scene.GetRootGameObjects().Where(x => GameOjbectHasReplicableChildren(x)));
                    }



                    var newScene = UnityEditor.SceneManagement.EditorSceneManager.NewScene(UnityEditor.SceneManagement.NewSceneSetup.EmptyScene, UnityEditor.SceneManagement.NewSceneMode.Additive);
                    GameObject replicationParent = new GameObject();
                    replicationParent.name = "=== Generated Environment ===";
                    switch (replicationPrecision)
                    {
                        case PlaybackRepicationPrecisionSettings.Exact:
                            var relicatedHeirarchy = ReplicateFullHierarchy(roots);
                            EnforceReplicationPattern(relicatedHeirarchy, replicationParent.transform);
                            break;

                            //TODO: IMPLEMENT OTHER REPLICATION METHODS

                        default:
                            List<GameObject> allGameObjects = new List<GameObject>();
                            foreach (var go in roots)
                            {
                                allGameObjects.Add(go);
                                //allGameObjects.AddRange(go.transform.child)
                            }
                            break;
                    }

                    GameObject autoGeneratedParent = new GameObject();
                    autoGeneratedParent.name = "=== Playback Prefabs ===";
                    foreach(var prefab in autoGeneratedPrefabs)
                    {
                        if(PrefabUtility.IsPartOfAnyPrefab(prefab))
                        {
                            PrefabUtility.InstantiatePrefab(prefab, autoGeneratedParent.transform);
                        }

                        else
                        {
                            Instantiate(prefab, autoGeneratedParent.transform);
                        }
                    }

                    new GameObject().name = "=== [Your Visualizers Here] ===";

                    //Now we do some cleanup...
                    //Do we build lighting?
                    //What other playback-essential gameobjects do we add?
                    //Do we close up all other open scenes

                    if (autoSaveGeneratedScene)
                    {
                        string pathToMimic = scenesToReplicate[0].path;
                        string filename = Path.GetFileNameWithoutExtension(pathToMimic) + Constants.PLAYBACK_SCENE_NAME_TAG + sceneSuffix;
                        string savePath = Path.Combine(Path.GetDirectoryName(pathToMimic), filename) + Path.GetExtension(pathToMimic);
                        print(savePath);
                        UnityEditor.SceneManagement.EditorSceneManager.SaveScene(newScene, savePath);

                        EditorBuildSettingsScene playbackSceneBuildSettings = new EditorBuildSettingsScene(savePath, true);
                        if (!EditorBuildSettings.scenes.Any(x => x.path == playbackSceneBuildSettings.path))
                        {
                            EditorBuildSettings.scenes = EditorBuildSettings.scenes.Append(playbackSceneBuildSettings).ToArray();

                            if (newScene.buildIndex == EditorBuildSettings.scenes.Length)
                            {
                                Debug.LogWarning("Failed to add scene to build settings!");
                            }
                        }
                        
                    }
                }
            }
        }

        private void OnGUI()
        {

        }
    }
}
